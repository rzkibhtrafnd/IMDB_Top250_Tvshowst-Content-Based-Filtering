# -*- coding: utf-8 -*-
"""IMDB_Top250_Tvshowst Content-Based Filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EciyhUB4Ln9qxjKPqZMroKX-s08XGhCD

# **Import Library**
"""

import gdown
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
from ast import literal_eval
import re
from datetime import datetime
from scipy.sparse import hstack

"""# **Dataset**"""

# Download dataset
url = 'https://drive.google.com/uc?id=1Cwyn6wG6OSP_o2n3kXx-En7axj7JDmyq'
output = 'IMDB_Top250_Tvshowst.csv'
gdown.download(url, output, quiet=False)

# Membaca dataset
df = pd.read_csv(output, encoding='latin-1')

df.info()

# Rename kolom Titile menjadi Title
df.rename(columns={'Titile': 'Title'}, inplace=True)

"""# **Data Cleaning & Preprocessing**"""

# Fungsi untuk membersihkan vote count
def clean_vote_count(vote_count):
    if isinstance(vote_count, str):
        # Hapus tanda kurung dan spasi
        vote_count = vote_count.strip("() ").replace(" ", "")
        # Cek apakah mengandung 'M' atau 'K'
        if vote_count.endswith('M'):
            try:
                vote_count = float(vote_count[:-1]) * 1_000_000
            except ValueError:
                vote_count = np.nan
        elif vote_count.endswith('K'):
            try:
                vote_count = float(vote_count[:-1]) * 1_000
            except ValueError:
                vote_count = np.nan
        else:
            try:
                vote_count = int(vote_count)
            except ValueError:
                vote_count = np.nan
    if pd.isna(vote_count):
        return 0
    else:
        return int(vote_count)

# Menerapkan fungsi ke kolom Vote_count
df['Vote_count'] = df['Vote_count'].apply(clean_vote_count)

# Membersihkan kolom Total_episodes: menghapus kata 'eps' dan spasi, kemudian konversi ke integer
df['Total_episodes'] = df['Total_episodes'].str.replace('eps', '', regex=False)
df['Total_episodes'] = df['Total_episodes'].str.strip()
df['Total_episodes'] = pd.to_numeric(df['Total_episodes'], errors='coerce').fillna(0).astype(int)

# Menangani nilai yang hilang pada kolom Age
df['Age'] = df['Age'].fillna('Unknown')

"""# **Eksplorasi Data**"""

print("\nStatistik Deskriptif:")
print(df.describe())

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.histplot(df['Rating'], bins=20, kde=True)
plt.title('Distribusi Rating TV Series')

plt.subplot(1, 2, 2)
sns.scatterplot(x='Rating', y='Vote_count', data=df)
plt.title('Hubungan Rating dan Vote Count')
plt.tight_layout()
plt.show()

"""# **Data Preparation & Feature Engineering**"""

# Gabungkan fitur teks untuk TF-IDF
df['Metadata'] = df.apply(lambda x:
                         f"{x['Category']} {x['Age']} {'Series' if x['Total_episodes'] > 1 else 'Movie'}",
                         axis=1)

# Normalisasi fitur numerik
scaler = MinMaxScaler()
df[['Rating_scaled', 'Vote_count_scaled']] = scaler.fit_transform(df[['Rating', 'Vote_count']])

# Vektorisasi teks
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['Metadata'])

# Gabungkan fitur
features = hstack([tfidf_matrix,
                  df[['Rating_scaled', 'Vote_count_scaled']].values])

"""# **Modeling (Content-Based Filtering)**"""

# Menghitung Cosine Similarity
cosine_sim = cosine_similarity(features, features)

# Fungsi Rekomendasi
def get_recommendations(title, cosine_sim=cosine_sim, df=df, top_n=5):
    try:
        # Mencari index film
        idx = df[df['Title'].str.lower() == title.lower()].index[0]

        # Mendapatkan skor similarity
        sim_scores = list(enumerate(cosine_sim[idx]))

        # Mengurutkan film berdasarkan skor similarity
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

        # Mengambil top_n rekomendasi (exclude film itu sendiri)
        sim_scores = sim_scores[1:top_n+1]

        # Mendapatkan indeks film
        movie_indices = [i[0] for i in sim_scores]

        # Return rekomendasi
        return df[['Title', 'Category', 'Rating', 'Age']].iloc[movie_indices]

    except IndexError:
        return "Film tidak ditemukan dalam database"

"""# **Evaluasi**"""

# Test Rekomendasi
sample_movie = df.sample(1)['Title'].values[0]
print(f"\nRekomendasi untuk film: {sample_movie}")
recommendations = get_recommendations(sample_movie)
print(recommendations)

# Visualisasi Rekomendasi
plt.figure(figsize=(10, 6))
sns.barplot(x='Rating', y='Title', data=recommendations.sort_values('Rating', ascending=False))
plt.title(f'Top 5 Rekomendasi untuk "{sample_movie}"')
plt.xlabel('Rating')
plt.ylabel('Judul Film')
plt.show()